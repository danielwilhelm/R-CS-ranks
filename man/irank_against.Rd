% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rank_utils.R
\name{irank_against}
\alias{irank_against}
\alias{frank_against}
\title{Compute integer ranks in another reference vector}
\usage{
irank_against(x, v, omega = 0, increasing = FALSE, na.rm = FALSE)

frank_against(x, v, omega = 0, increasing = FALSE, na.rm = FALSE)
}
\arguments{
\item{x}{numeric query vector.}

\item{v}{numeric reference vector.}

\item{omega}{numeric; numeric value in [0,1], each corresponding to a different definition of the rank; default is \code{0}. See Details.}

\item{increasing}{logical; if \code{TRUE}, then large elements in \code{x} receive a large rank. 
In other words, larger values in \code{x} are lower in ranking. Otherwise, large elements receive small ranks.}

\item{na.rm}{logical; if \code{TRUE}, then \code{NA}'s are removed from \code{x}.
In other case the output for NAs is NA and for other values it's for extreme
possibilities that NA values are actually in first or last positions of ranking.}
}
\value{
Integer vector of the same length as \code{x} containing the ranks.
}
\description{
The method \code{\link{irank}} compares ranks using the same vector as reference.
This method returns ranks, that values from \code{x} would assume if (individually)
inserted into \code{v}.
}
\details{
\code{omega} (\eqn{\omega}) value determines, how equal entries in \code{x} should be ranked; 
in other words how to handle ex aequo cases. If there are none, then the parameter 
does not affect the output of this function. 
For example, let's say, that \eqn{n} largest entries in \code{x} are equal.
Those entries could receive (minimum) rank 1 or (maximum) rank \eqn{n} or some value in between.

Suppose, that we want to assign rank to \eqn{n} equal values in an array.
Denote their minimum rank as \eqn{r} and maximum as \eqn{R = r + n - 1}.
Then the assigned rank is an average of 
minimum and maximum rank, weighted by \eqn{\omega}: 
\deqn{r(1-\omega) + R\omega}
}
\section{Functions}{
\itemize{
\item \code{frank_against()}: Compute integer ranks in another reference vector

}}
\examples{
irank_against(1:10, c(4,4,4,3,1,10,7,7))
}
